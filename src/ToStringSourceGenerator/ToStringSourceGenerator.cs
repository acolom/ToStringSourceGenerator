using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Diagnostics;
using ToStringSourceGenerator.Utils;
using Microsoft.CodeAnalysis.CSharp;
using System.CodeDom.Compiler;

namespace ToStringSourceGenerator
{
    [Generator]
    public class ToStringSourceGenerator : ISourceGenerator
    {
        public void Execute(SourceGeneratorContext context)
        {
            var compilation = (CSharpCompilation)context.Compilation;

            var types = CompilationHelper.GetAllTypes(compilation.Assembly);

            foreach (var type in types)
            {
                if (type.GetAttributes().Any(attr => attr.AttributeClass.Name == nameof(AutoToStringAttribute)))
                {
                    if (CompilationHelper.IsPartial(type))
                    {
                        Debugger.Launch();
                        AddToStringSourceText(context, type);
                    }
                    else
                    {
                        // TODO Dar un mejor mensage de error
                        context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                            nameof(AutoToStringAttribute),
                            "La clase debe ser parcial",
                            "La clase debe ser parcial",
                            "Unknown category",
                            DiagnosticSeverity.Warning,
                            true),
                            Location.None, "La clase debe ser parcial"));

                    }
                }
            }

            context.AddCompiledOnMetadataAttribute();
            context.AddHelloWorldClass();
        }

        public void Initialize(InitializationContext context)
        {
            // No initialization required for this one
        }

        private void AddToStringSourceText(SourceGeneratorContext context, INamedTypeSymbol type)
        {
            // TODO Comprobar si contiene to string
            using (var stringWriter = new StringWriter())
            using (var indentedTextWriter = new IndentedTextWriter(stringWriter, "    "))
            {
                indentedTextWriter.WriteLine("using System;");
                //indentedTextWriter.WriteLine("using System.Collections.Generic;");
                //indentedTextWriter.WriteLine("using System.Collections.Immutable;");
                indentedTextWriter.WriteLine();
                indentedTextWriter.WriteLine($"namespace {type.ContainingNamespace}");
                indentedTextWriter.WriteLine("{");
                indentedTextWriter.Indent++;

                indentedTextWriter.WriteLine($"partial class {type.Name}");
                indentedTextWriter.WriteLine("{");
                indentedTextWriter.Indent++;

                indentedTextWriter.WriteLine("public override string ToString()");
                indentedTextWriter.WriteLine("{");
                indentedTextWriter.Indent++;

                indentedTextWriter.WriteLine("return \"I am autogenerated\";");

                indentedTextWriter.Indent--;
                indentedTextWriter.WriteLine("}");

                indentedTextWriter.Indent--;
                indentedTextWriter.WriteLine("}");

                indentedTextWriter.Indent--;
                indentedTextWriter.WriteLine("}");

                indentedTextWriter.Flush();
                stringWriter.Flush();

                var sourceText = SourceText.From(stringWriter.ToString(), Encoding.UTF8);

                var hintName = $"AutoToString_{type.ContainingNamespace.Name.Replace(".", "_")}_{type.Name}.g.cs";
                context.AddSource(hintName, sourceText);
            }
        }
    }
}
